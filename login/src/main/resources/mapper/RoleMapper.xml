<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.demo.security.dao.RoleMapper">
  <resultMap id="BaseResultMap" type="org.demo.security.entity.Role">
    <id column="roleId" jdbcType="BIGINT" property="roleId" />
    <result column="roleName" jdbcType="VARCHAR" property="roleName" />
    <result column="roleKey" jdbcType="VARCHAR" property="roleKey" />
    <result column="roleSort" jdbcType="INTEGER" property="roleSort" />
    <result column="dataScope" jdbcType="CHAR" property="dataScope" />
    <result column="status" jdbcType="CHAR" property="status" />
    <result column="delFlag" jdbcType="CHAR" property="delFlag" />
    <result column="createBy" jdbcType="BIGINT" property="createBy" />
    <result column="createTime" jdbcType="VARCHAR" property="createTime" />
    <result column="updateBy" jdbcType="BIGINT" property="updateBy" />
    <result column="updateTime" jdbcType="VARCHAR" property="updateTime" />
    <result column="remark" jdbcType="VARCHAR" property="remark" />
  </resultMap>

    <update id="updateDataScopeByRoleId">
        UPDATE `role` SET dataScope=#{dataScope} WHERE roleId=${roleId};
    </update>

    <select id="getRoleByUserId" resultMap="BaseResultMap">
        SELECT * FROM `role` WHERE roleId=(SELECT DISTINCT roleId FROM  `user_role` WHERE userId=${userId});
    </select>

    <select id="getRoleIdAndName" resultType="com.alibaba.fastjson2.JSONObject">
        SELECT * FROM `role` WHERE delFlag='0' order by roleSort;
    </select>

    <update id="delRoleById">
        UPDATE `role` SET delFlag='1' WHERE roleId=${roleId};
    </update>

    <update id="updateRole">
        UPDATE `role` SET `roleName` = #{role.roleName},
                          `roleKey` = #{role.roleKey},
                          `roleSort` = #{role.roleSort},
                          `status` = #{role.status},
                          `updateBy` = #{role.updateBy},
                          `updateTime` = #{role.updateTime},
                          `remark` = #{role.remark} WHERE `roleId` = ${role.roleId};
    </update>



  <select id="getRoleByRoleId" resultMap="BaseResultMap">
    SELECT * FROM `role` WHERE roleId=${roleId};
  </select>

  <update id="increaseRoleSortByRoleSort1">
    UPDATE `role`
    SET `roleSort` = roleSort + 1
    WHERE orderNum &gt;= ${newRoleSort}
      and orderNum &lt; ${tarRoleSort};
  </update>




  <insert id="addRole" useGeneratedKeys="true" keyProperty="roleId">
    INSERT INTO `role`(`roleName`,
                       `roleKey`,
                       `roleSort`,
                       `dataScope`,
                       `status`,
                       `delFlag`,
                       `createBy`,
                       `createTime`,
                       `updateTime`,
                       `remark`) VALUES ( #{role.roleName},
                                          #{role.roleKey},
                                          ${role.roleSort},
                                          #{role.dataScope},
                                          #{role.status},
                                          #{role.delFlag},
                                          ${role.createBy},
                                          #{role.createTime},
                                          #{role.updateTime},
                                          #{role.remark});
  </insert>

  <update id="increaseRoleSortByRoleSort">
    UPDATE `role`
    SET `roleSort` = roleSort + 1
    WHERE roleSort &gt;= ${roleSort};
  </update>

  <select id="hasRoleByRoleSort" resultType="java.lang.Boolean">
    SELECT CASE WHEN COUNT(roleId) > 0 THEN 1 ELSE 0 END AS 'hasRole'  FROM role WHERE roleSort=${roleSort};
  </select>







</mapper>